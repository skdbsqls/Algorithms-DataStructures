/*
[문제 설명]
두 정수 X, Y의 임의의 자리에서 공통으로 나타나는 정수 k(0 ≤ k ≤ 9)들을 이용하여 만들 수 있는 가장 큰 정수를 두 수의 짝꿍이라 합니다.(단, 공통으로 나타나는 정수 중 서로 짝지을 수 있는 숫자만 사용합니다)
 X, Y의 짝꿍이 존재하지 않으면, 짝꿍은 -1입니다. X, Y의 짝꿍이 0으로만 구성되어 있다면, 짝꿍은 0입니다.

예를 들어, X = 3403이고 Y = 13203이라면, X와 Y의 짝꿍은 X와 Y에서 공통으로 나타나는 3, 0, 3으로 만들 수 있는 가장 큰 정수인 330입니다. 
다른 예시로 X = 5525이고 Y = 1255이면 X와 Y의 짝꿍은 X와 Y에서 공통으로 나타나는 2, 5, 5로 만들 수 있는 가장 큰 정수인 552입니다(X에는 5가 3개, Y에는 5가 2개 나타나므로 남는 5 한 개는 짝 지을 수 없습니다.)
두 정수 X, Y가 주어졌을 때, X, Y의 짝꿍을 return하는 solution 함수를 완성해주세요.

[제한 사항]
- 3 ≤ X, Y의 길이(자릿수) ≤ 3,000,000입니다.
- X, Y는 0으로 시작하지 않습니다.
- X, Y의 짝꿍은 상당히 큰 정수일 수 있으므로, 문자열로 반환합니다.
*/

function solution(X, Y) {
  // 길이가 10인 배열 생성 및 0으로 값을 채움
  let xArr = new Array(10).fill(0);
  let yArr = new Array(10).fill(0);

  // X와 Y를 순회하면서 해당 숫자와 같은 인덱스의 값을 +1 (어떤 숫자가 몇 번 나타나는 지 체크)
  for (let i = 0; i < X.length; i++) {
    xArr[X[i]] += 1;
  }
  for (let i = 0; i < Y.length; i++) {
    yArr[Y[i]] += 1;
  }

  // xArr와 yArr를 순회하면서 (거꾸로, 가장 큰 수를 만들기 위함)
  let answer = ""; // 공통으로 나타나는 수로 만들 수 있는 가장 큰 정수
  for (let i = 9; i >= 0; i--) {
    // 값이 0이 아닌 경우
    if (xArr[i] !== 0 && yArr[i] !== 0) {
      // 두 배열의 값 중 작은 값
      let min = Math.min(xArr[i], yArr[i]);
      answer += i.toString().repeat(min);
    }
  }

  // 공통된 숫자가 없는 경우
  if (answer === "") return "-1";
  // 공통된 숫자가 0만 있는 경우
  if (answer[0] === "0") return "0";
  // 가장 큰 수를 만들 수 있는 경우
  return answer;
}
