/*
[문제 설명]
문자열 s가 주어졌을 때, s의 각 위치마다 자신보다 앞에 나왔으면서, 자신과 가장 가까운 곳에 있는 같은 글자가 어디 있는지 알고 싶습니다.
예를 들어, s="banana"라고 할 때,  각 글자들을 왼쪽부터 오른쪽으로 읽어 나가면서 다음과 같이 진행할 수 있습니다.

- b는 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
- a는 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
- n은 처음 나왔기 때문에 자신의 앞에 같은 글자가 없습니다. 이는 -1로 표현합니다.
- a는 자신보다 두 칸 앞에 a가 있습니다. 이는 2로 표현합니다.
- n도 자신보다 두 칸 앞에 n이 있습니다. 이는 2로 표현합니다.
- a는 자신보다 두 칸, 네 칸 앞에 a가 있습니다. 이 중 가까운 것은 두 칸 앞이고, 이는 2로 표현합니다.

따라서 최종 결과물은 [-1, -1, -1, 2, 2, 2]가 됩니다.

문자열 s이 주어질 때, 위와 같이 정의된 연산을 수행하는 함수 solution을 완성해주세요.

[제한사항]
- 1 ≤ s의 길이 ≤ 10,000
- s은 영어 소문자로만 이루어져 있습니다.
*/

// 풀이 1
function solution(s) {
  let answer = [];

  // s 배열을 돌면서
  for (let i = 0; i < s.length; i++) {
    let count = -1;
    // 현재 배열의 요소보다 앞에 있는 요소들을 뒤에서부터 돌면서
    for (let j = i - 1; j >= 0; j--) {
      // 같은 요소가 있는 경우 (뒤에서부터 돌기 때문에 무조건 가장 가까운 요소부터 발견됨)
      if (s[i] === s[j]) {
        count = i - j; // count는 현재 요소의 인덱스 - 가장 가까운 요소의 인덱스로 재할당
        break; // break로 더 앞에 있는, 현재 요소 기준 더 멀리 있는 요소가 발견되어 count가 재할당될 일이 없도록 함
      }
      // 같은 요소가 없는 경우 count는 -1
    }
    answer.push(count);
  }

  return answer;
}

// 풀이 2
function solution(s) {
  let answer = []; // 정답
  let temp = []; // 배열의 요소를 하나씩 담을 그릇

  for (let i = 0; i < s.length; i++) {
    // 만약 temp에 해당 배열의 요소가 없으면
    if (!temp.includes(s[i])) {
      answer.push(-1); // 정답 배열에 -1을 추가하고
      temp.push(s[i]); // temp에 해당 요소 추가
    }
    // 만약 temp에 해당 배열의 요소가 있으면
    else {
      // lastIndexOf를 통해 temp에서 해당 배열의 요소와 같은 요소들 중 마지막 요소를 찾아 인덱스 반환
      // 해당 요소의 인덱스 - 해당 요소와 가장 가까운 요소의 인덱스를 정답 배열에 추가
      answer.push(i - temp.lastIndexOf(s[i]));
      temp.push(s[i]); // temp에 해당 요소 추가
    }
  }

  return answer;
}
