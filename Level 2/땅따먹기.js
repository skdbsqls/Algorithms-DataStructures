/*
[문제 설명]
땅따먹기 게임을 하려고 합니다. 
땅따먹기 게임의 땅(land)은 총 N행 4열로 이루어져 있고, 모든 칸에는 점수가 쓰여 있습니다. 
1행부터 땅을 밟으며 한 행씩 내려올 때, 각 행의 4칸 중 한 칸만 밟으면서 내려와야 합니다. 
단, 땅따먹기 게임에는 한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 특수 규칙이 있습니다.

예를 들면,

    | 1 | 2 | 3 | 5 |
    | 5 | 6 | 7 | 8 |
    | 4 | 3 | 2 | 1 |

로 땅이 주어졌다면, 1행에서 네번째 칸 (5)를 밟았으면, 2행의 네번째 칸 (8)은 밟을 수 없습니다.

마지막 행까지 모두 내려왔을 때, 얻을 수 있는 점수의 최대값을 return하는 solution 함수를 완성해 주세요. 
위 예의 경우, 1행의 네번째 칸 (5), 2행의 세번째 칸 (7), 3행의 첫번째 칸 (4) 땅을 밟아 16점이 최고점이 되므로 16을 return 하면 됩니다.

[제한사항]
- 행의 개수 N : 100,000 이하의 자연수
- 열의 개수는 4개이고, 땅(land)은 2차원 배열로 주어집니다.
- 점수 : 100 이하의 자연수
*/

// 정답
function solution(land) {
  let max = 0; // 최대값
  let idx = 0; // 최대값의 인덱스

  for (let i = 1; i < land.length; i++) {
    max = Math.max(...land[i - 1]); // 각 행의 최대값 찾기
    idx = land[i - 1].indexOf(max); // 각 행의 최대값의 인덱스 찾기
    land[i - 1][idx] = 0; // 최대값에 0을 할당해서 다음 행에서 이전과 같은 열일 경우 2번째 최대값 찾기

    // 행을 돌면서 이전 행의 최대값을 더한 값으로 업데이트
    for (let j = 0; j < land[i].length; j++) {
      // 이전과 같은 열일 경우 (해당 열의 이전 값이 최대값인 경우)
      if (j === idx) {
        // 이전 행에서 최대값을 제외하고 2번째 최대값을 찾아 더해줌
        land[i][j] = land[i][j] + Math.max(...land[i - 1]);
      }
      // 이전과 다른 열일 경우 (해당 열의 이전 값이 최대값이 아닌 경우)
      else {
        land[i][j] = land[i][j] + max; // 최대값을 더해줌
      }
    }
  }

  // 최대값을 마지막 행의 최대값으로 업데이트
  max = Math.max(...land[land.length - 1]);

  return max;
}
